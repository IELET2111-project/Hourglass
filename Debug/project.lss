
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000003f6  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800150  00800150  000004da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a38  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e9  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000523  00000000  00000000  000017f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000457  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 35       	cpi	r26, 0x55	; 85
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
/* Prescaler is set to: 128. 											*/
/* Interrupts is enabled. Reference voltage is set to AVCC. ADC0 is the */
/* initial input channel.                                               */
/************************************************************************/
void initADC() {
	ADCSRA |= (1<<ADEN);										// Enable ADC
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS1);				// Configure prescaler
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);										// Configure interrupt
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1) | (1<<REFS0);							// Set reference to AVCC
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	ADMUX |= (0<<ADLAR);										// Configure right adjusted result
  c6:	80 81       	ld	r24, Z
  c8:	80 83       	st	Z, r24
	ADMUX |= (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);		// Configure ADC0 as input channel
  ca:	80 81       	ld	r24, Z
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <initTimer>:
/************************************************************************/
/* Initialization of the timer using 8-bit Timer0.                      */
/* Prescaler is set to 256x.                                            */
/************************************************************************/
void initTimer() {
	DDRD |= (1<<DDD6);
  d0:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	// Fast PWM, non-inverting
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	83 68       	ori	r24, 0x83	; 131
  d6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);	// Prescale 256x
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 bd       	out	0x25, r24	; 37
  de:	08 95       	ret

000000e0 <__vector_21>:
/************************************************************************/
/* Interrupt service routine for analog-to-digital converter. ISR is    */
/* triggered on finished conversion. Saves conversion and toggles input */
/* channel.														        */
/************************************************************************/
ISR(ADC_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	static uint8_t inputChannel = 0;				// Stores current analog input channel (ADC0, ADC1...)
	switch (inputChannel) {
  f2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
  f6:	88 23       	and	r24, r24
  f8:	19 f0       	breq	.+6      	; 0x100 <__vector_21+0x20>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	69 f0       	breq	.+26     	; 0x118 <__vector_21+0x38>
  fe:	16 c0       	rjmp	.+44     	; 0x12c <__vector_21+0x4c>
		case 0:
			inputChannel = 1; 						// Change input channel to temperature sensor
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
			temperature = ADC;
 106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <temperature+0x1>
 112:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <temperature>
			break;
 116:	0a c0       	rjmp	.+20     	; 0x12c <__vector_21+0x4c>
		case 1:
			inputChannel = 0; 						// Change input channel to potentiometer
 118:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
			potmeter = ADC;
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <potmeter+0x1>
 128:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <potmeter>
			break;
	}
	ADMUX = (ADMUX & 0b11110000) | inputChannel; 	// Changes input channel
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
 138:	89 2b       	or	r24, r25
 13a:	80 83       	st	Z, r24
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:

/************************************************************************/
/* Main loop. Does something... Â´\(o.o)/`                               */
/************************************************************************/
int main(void) {
	initADC();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initTimer();
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer>
	initSerial();
 156:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <initSerial>
	sei();
 15a:	78 94       	sei
	uint16_t threshold = 500;
 15c:	0f 2e       	mov	r0, r31
 15e:	f4 ef       	ldi	r31, 0xF4	; 244
 160:	ef 2e       	mov	r14, r31
 162:	ff 24       	eor	r15, r15
 164:	f3 94       	inc	r15
 166:	f0 2d       	mov	r31, r0
	while (1) {
		if (!(ADCSRA & (1<<ADSC))) { 	// If conversion is done
 168:	ca e7       	ldi	r28, 0x7A	; 122
 16a:	d0 e0       	ldi	r29, 0x00	; 0
			writeNumber(temperature/4);
			writeString("\tChoose new threshold by writing: <number> with NULL termination\n");
		} else {
			OCR0A = 0;
		}
		if (UCSR0A & (1<<RXC0)) {		// If incoming data
 16c:	00 ec       	ldi	r16, 0xC0	; 192
 16e:	10 e0       	ldi	r17, 0x00	; 0
	initTimer();
	initSerial();
	sei();
	uint16_t threshold = 500;
	while (1) {
		if (!(ADCSRA & (1<<ADSC))) { 	// If conversion is done
 170:	88 81       	ld	r24, Y
 172:	86 fd       	sbrc	r24, 6
 174:	03 c0       	rjmp	.+6      	; 0x17c <main+0x2e>
 			ADCSRA |= (1<<ADSC); 		// Start new conversion
 176:	88 81       	ld	r24, Y
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	88 83       	st	Y, r24
    	}
		if (potmeter > threshold) {
 17c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <potmeter>
 180:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <potmeter+0x1>
 184:	e8 16       	cp	r14, r24
 186:	f9 06       	cpc	r15, r25
 188:	e0 f4       	brcc	.+56     	; 0x1c2 <main+0x74>
			OCR0A = temperature/4;
 18a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <temperature>
 18e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <temperature+0x1>
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	87 bd       	out	0x27, r24	; 39
			writeString("Temperature: ");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 c2 01 	call	0x384	; 0x384 <writeString>
			writeNumber(temperature/4);
 1a4:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <temperature>
 1a8:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <temperature+0x1>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	0e 94 07 01 	call	0x20e	; 0x20e <writeNumber>
			writeString("\tChoose new threshold by writing: <number> with NULL termination\n");
 1b8:	8e e0       	ldi	r24, 0x0E	; 14
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 c2 01 	call	0x384	; 0x384 <writeString>
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <main+0x76>
		} else {
			OCR0A = 0;
 1c2:	17 bc       	out	0x27, r1	; 39
		}
		if (UCSR0A & (1<<RXC0)) {		// If incoming data
 1c4:	f8 01       	movw	r30, r16
 1c6:	80 81       	ld	r24, Z
 1c8:	88 23       	and	r24, r24
 1ca:	94 f6       	brge	.-92     	; 0x170 <main+0x22>
			threshold = readNumber();
 1cc:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readNumber>
 1d0:	7c 01       	movw	r14, r24
 1d2:	ce cf       	rjmp	.-100    	; 0x170 <main+0x22>

000001d4 <initSerial>:
#include <avr/io.h>
#include "serial.h"
#include <util/setbaud.h>

void initSerial() {
	UBRR0 = UBRR_VALUE;
 1d4:	87 e6       	ldi	r24, 0x67	; 103
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1ec:	08 95       	ret

000001ee <transmitByte>:
}

void transmitByte(uint8_t data) {
	while (!(UCSR0A & (1<<UDRE0)));
 1ee:	e0 ec       	ldi	r30, 0xC0	; 192
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	95 ff       	sbrs	r25, 5
 1f6:	fd cf       	rjmp	.-6      	; 0x1f2 <transmitByte+0x4>
	UDR0 = data;
 1f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1fc:	08 95       	ret

000001fe <receiveByte>:
}

uint8_t receiveByte() {
  	while (!(UCSR0A & (1<<RXC0)));
 1fe:	e0 ec       	ldi	r30, 0xC0	; 192
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	ec f7       	brge	.-6      	; 0x202 <receiveByte+0x4>
  	return UDR0;
 208:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 20c:	08 95       	ret

0000020e <writeNumber>:

void writeNumber(int16_t number) {
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ff 92       	push	r15
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	8c 01       	movw	r16, r24
	if (number == 0) {							// Consider case where number = 0
 222:	00 97       	sbiw	r24, 0x00	; 0
 224:	39 f4       	brne	.+14     	; 0x234 <writeNumber+0x26>
		transmitByte('0');
 226:	80 e3       	ldi	r24, 0x30	; 48
 228:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
		transmitByte(0);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
		return;
 232:	3a c0       	rjmp	.+116    	; 0x2a8 <writeNumber+0x9a>
	}
	if (number < 0) {							// Case where number is negative
 234:	99 23       	and	r25, r25
 236:	54 f5       	brge	.+84     	; 0x28c <writeNumber+0x7e>
		transmitByte('-');
 238:	8d e2       	ldi	r24, 0x2D	; 45
 23a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
		number *= -1;							// Necessary for ASCII conversion
 23e:	11 95       	neg	r17
 240:	01 95       	neg	r16
 242:	11 09       	sbc	r17, r1
 244:	23 c0       	rjmp	.+70     	; 0x28c <writeNumber+0x7e>
	}
	uint8_t mostSignificantDigitFound = 0;
	for (int16_t i = 10000; i >= 1; i /= 10) {
		if (!mostSignificantDigitFound) {
 246:	f1 10       	cpse	r15, r1
 248:	07 c0       	rjmp	.+14     	; 0x258 <writeNumber+0x4a>
			mostSignificantDigitFound = number/i;
 24a:	c8 01       	movw	r24, r16
 24c:	be 01       	movw	r22, r28
 24e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divmodhi4>
 252:	f6 2e       	mov	r15, r22
		} 
		if (mostSignificantDigitFound) {		// Only prints 0 if it is to the right of the most significant digit
 254:	66 23       	and	r22, r22
 256:	41 f0       	breq	.+16     	; 0x268 <writeNumber+0x5a>
			transmitByte(number/i + '0');
 258:	c8 01       	movw	r24, r16
 25a:	be 01       	movw	r22, r28
 25c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divmodhi4>
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	86 0f       	add	r24, r22
 264:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
		}
		number %= i;
 268:	c8 01       	movw	r24, r16
 26a:	be 01       	movw	r22, r28
 26c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divmodhi4>
 270:	8c 01       	movw	r16, r24
	if (number < 0) {							// Case where number is negative
		transmitByte('-');
		number *= -1;							// Necessary for ASCII conversion
	}
	uint8_t mostSignificantDigitFound = 0;
	for (int16_t i = 10000; i >= 1; i /= 10) {
 272:	ce 01       	movw	r24, r28
 274:	b5 01       	movw	r22, r10
 276:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divmodhi4>
 27a:	eb 01       	movw	r28, r22
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	c8 1a       	sub	r12, r24
 280:	d1 08       	sbc	r13, r1
 282:	09 f7       	brne	.-62     	; 0x246 <writeNumber+0x38>
		if (mostSignificantDigitFound) {		// Only prints 0 if it is to the right of the most significant digit
			transmitByte(number/i + '0');
		}
		number %= i;
	}
	transmitByte(0); // NULL-termination
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
 28a:	0e c0       	rjmp	.+28     	; 0x2a8 <writeNumber+0x9a>
uint8_t receiveByte() {
  	while (!(UCSR0A & (1<<RXC0)));
  	return UDR0;
}

void writeNumber(int16_t number) {
 28c:	0f 2e       	mov	r0, r31
 28e:	f5 e0       	ldi	r31, 0x05	; 5
 290:	cf 2e       	mov	r12, r31
 292:	d1 2c       	mov	r13, r1
 294:	f0 2d       	mov	r31, r0
 296:	c0 e1       	ldi	r28, 0x10	; 16
 298:	d7 e2       	ldi	r29, 0x27	; 39
 29a:	f1 2c       	mov	r15, r1
	if (number < 0) {							// Case where number is negative
		transmitByte('-');
		number *= -1;							// Necessary for ASCII conversion
	}
	uint8_t mostSignificantDigitFound = 0;
	for (int16_t i = 10000; i >= 1; i /= 10) {
 29c:	0f 2e       	mov	r0, r31
 29e:	fa e0       	ldi	r31, 0x0A	; 10
 2a0:	af 2e       	mov	r10, r31
 2a2:	b1 2c       	mov	r11, r1
 2a4:	f0 2d       	mov	r31, r0
 2a6:	cf cf       	rjmp	.-98     	; 0x246 <writeNumber+0x38>
			transmitByte(number/i + '0');
		}
		number %= i;
	}
	transmitByte(0); // NULL-termination
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	1f 91       	pop	r17
 2ae:	0f 91       	pop	r16
 2b0:	ff 90       	pop	r15
 2b2:	df 90       	pop	r13
 2b4:	cf 90       	pop	r12
 2b6:	bf 90       	pop	r11
 2b8:	af 90       	pop	r10
 2ba:	08 95       	ret

000002bc <readNumber>:

int16_t readNumber() {
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
	char digit = '0';
	int16_t sign = 1;
 2cc:	c1 e0       	ldi	r28, 0x01	; 1
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
int16_t readNumber() {
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
	char digit = '0';
 2d0:	00 e3       	ldi	r16, 0x30	; 48

int16_t readNumber() {
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
 2d2:	10 e3       	ldi	r17, 0x30	; 48
}

int16_t readNumber() {
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
 2d4:	0f 2e       	mov	r0, r31
 2d6:	f0 e3       	ldi	r31, 0x30	; 48
 2d8:	ff 2e       	mov	r15, r31
 2da:	f0 2d       	mov	r31, r0
	transmitByte(0); // NULL-termination
}

int16_t readNumber() {
	char thousands = '0';
	char hundreds = '0';
 2dc:	0f 2e       	mov	r0, r31
 2de:	f0 e3       	ldi	r31, 0x30	; 48
 2e0:	ef 2e       	mov	r14, r31
 2e2:	f0 2d       	mov	r31, r0
		hundreds = tens;
		tens = ones;
		ones = digit;
		digit = receiveByte();
		if (digit == '-') {						// Handle negative numbers
			sign = -1;
 2e4:	cc 24       	eor	r12, r12
 2e6:	ca 94       	dec	r12
 2e8:	dd 24       	eor	r13, r13
 2ea:	da 94       	dec	r13
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <readNumber+0x40>
 2ee:	cc 2d       	mov	r28, r12
 2f0:	dd 2d       	mov	r29, r13
			digit = '0';
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	ef 2c       	mov	r14, r15
 2f6:	f1 2e       	mov	r15, r17
 2f8:	10 2f       	mov	r17, r16
 2fa:	08 2f       	mov	r16, r24
	do {
		thousands = hundreds;
		hundreds = tens;
		tens = ones;
		ones = digit;
		digit = receiveByte();
 2fc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <receiveByte>
		if (digit == '-') {						// Handle negative numbers
 300:	8d 32       	cpi	r24, 0x2D	; 45
 302:	a9 f3       	breq	.-22     	; 0x2ee <readNumber+0x32>
			sign = -1;
			digit = '0';
		}
	} while (digit != 0);                      // NULL-termination
 304:	81 11       	cpse	r24, r1
 306:	f6 cf       	rjmp	.-20     	; 0x2f4 <readNumber+0x38>
	return sign*(1000*(thousands - '0') + 100*(hundreds - '0') + 10*(tens - '0') + ones - '0');
 308:	4e 2d       	mov	r20, r14
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	40 53       	subi	r20, 0x30	; 48
 30e:	51 09       	sbc	r21, r1
 310:	88 ee       	ldi	r24, 0xE8	; 232
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	48 9f       	mul	r20, r24
 316:	90 01       	movw	r18, r0
 318:	49 9f       	mul	r20, r25
 31a:	30 0d       	add	r19, r0
 31c:	58 9f       	mul	r21, r24
 31e:	30 0d       	add	r19, r0
 320:	11 24       	eor	r1, r1
 322:	4f 2d       	mov	r20, r15
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	40 53       	subi	r20, 0x30	; 48
 328:	51 09       	sbc	r21, r1
 32a:	64 e6       	ldi	r22, 0x64	; 100
 32c:	64 9f       	mul	r22, r20
 32e:	c0 01       	movw	r24, r0
 330:	65 9f       	mul	r22, r21
 332:	90 0d       	add	r25, r0
 334:	11 24       	eor	r1, r1
 336:	82 0f       	add	r24, r18
 338:	93 1f       	adc	r25, r19
 33a:	21 2f       	mov	r18, r17
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	20 53       	subi	r18, 0x30	; 48
 340:	31 09       	sbc	r19, r1
 342:	a9 01       	movw	r20, r18
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	22 0f       	add	r18, r18
 34a:	33 1f       	adc	r19, r19
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	24 0f       	add	r18, r20
 356:	35 1f       	adc	r19, r21
 358:	82 0f       	add	r24, r18
 35a:	93 1f       	adc	r25, r19
 35c:	80 0f       	add	r24, r16
 35e:	91 1d       	adc	r25, r1
 360:	c0 97       	sbiw	r24, 0x30	; 48
}
 362:	9c 01       	movw	r18, r24
 364:	2c 9f       	mul	r18, r28
 366:	c0 01       	movw	r24, r0
 368:	2d 9f       	mul	r18, r29
 36a:	90 0d       	add	r25, r0
 36c:	3c 9f       	mul	r19, r28
 36e:	90 0d       	add	r25, r0
 370:	11 24       	eor	r1, r1
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <writeString>:

void writeString(char* string) {
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ec 01       	movw	r28, r24
	while (*string) {
 38a:	88 81       	ld	r24, Y
 38c:	88 23       	and	r24, r24
 38e:	31 f0       	breq	.+12     	; 0x39c <writeString+0x18>
 390:	21 96       	adiw	r28, 0x01	; 1
		transmitByte(*string);
 392:	0e 94 f7 00 	call	0x1ee	; 0x1ee <transmitByte>
	} while (digit != 0);                      // NULL-termination
	return sign*(1000*(thousands - '0') + 100*(hundreds - '0') + 10*(tens - '0') + ones - '0');
}

void writeString(char* string) {
	while (*string) {
 396:	89 91       	ld	r24, Y+
 398:	81 11       	cpse	r24, r1
 39a:	fb cf       	rjmp	.-10     	; 0x392 <writeString+0xe>
		transmitByte(*string);
		string++;
	}
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <__divmodhi4>:
 3a2:	97 fb       	bst	r25, 7
 3a4:	07 2e       	mov	r0, r23
 3a6:	16 f4       	brtc	.+4      	; 0x3ac <__divmodhi4+0xa>
 3a8:	00 94       	com	r0
 3aa:	07 d0       	rcall	.+14     	; 0x3ba <__divmodhi4_neg1>
 3ac:	77 fd       	sbrc	r23, 7
 3ae:	09 d0       	rcall	.+18     	; 0x3c2 <__divmodhi4_neg2>
 3b0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__udivmodhi4>
 3b4:	07 fc       	sbrc	r0, 7
 3b6:	05 d0       	rcall	.+10     	; 0x3c2 <__divmodhi4_neg2>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__divmodhi4_exit>

000003ba <__divmodhi4_neg1>:
 3ba:	90 95       	com	r25
 3bc:	81 95       	neg	r24
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__divmodhi4_neg2>:
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255

000003c8 <__divmodhi4_exit>:
 3c8:	08 95       	ret

000003ca <__udivmodhi4>:
 3ca:	aa 1b       	sub	r26, r26
 3cc:	bb 1b       	sub	r27, r27
 3ce:	51 e1       	ldi	r21, 0x11	; 17
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <__udivmodhi4_ep>

000003d2 <__udivmodhi4_loop>:
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	a6 17       	cp	r26, r22
 3d8:	b7 07       	cpc	r27, r23
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <__udivmodhi4_ep>
 3dc:	a6 1b       	sub	r26, r22
 3de:	b7 0b       	sbc	r27, r23

000003e0 <__udivmodhi4_ep>:
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	5a 95       	dec	r21
 3e6:	a9 f7       	brne	.-22     	; 0x3d2 <__udivmodhi4_loop>
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>

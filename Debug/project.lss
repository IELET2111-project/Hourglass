
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002f4  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800110  00800110  00000398  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ee  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d4  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000509  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00001b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
/* Initialization of analog-to-digital converter. Prescaler is set to:. */
/* Interrupts is enabled. Reference voltage is set to AVCC. ADC0 is the */
/* initial input channel.                                               */
/************************************************************************/
void initADC() {
	ADCSRA |= (1<<ADEN);										// Enable ADC
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS1);				// Configure prescaler
  b0:	80 81       	ld	r24, Z
  b2:	86 60       	ori	r24, 0x06	; 6
  b4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);										// Configure interrupt
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1) | (1<<REFS0);							// Set reference to AVCC
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24
	ADMUX |= (0<<ADLAR);										// Configure right adjusted result
  c6:	80 81       	ld	r24, Z
  c8:	80 83       	st	Z, r24
	ADMUX |= (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);		// Configure ADC0 as input channel
  ca:	80 81       	ld	r24, Z
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <initTimer>:
/************************************************************************/
/* Initialization of the timer using 8-bit Timer0.                      */
/* Prescaler is set to 256x.                                            */
/************************************************************************/
void initTimer() {
	DDRD |= (1<<DDD6);
  d0:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);	// Fast PWM, non-inverting
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	83 68       	ori	r24, 0x83	; 131
  d6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);	// Prescale 256x
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 bd       	out	0x25, r24	; 37
  de:	08 95       	ret

000000e0 <__vector_21>:
/* Interrupt service routine for analog-to-digital converter. ISR is    */
/* triggered on finished conversion. Saves conversion and toggles input */
/* channel. Switch statement can be replaced by:						*/
/* inputChannel = !inputChannel; if only ADC0 and ADC1 is used.         */
/************************************************************************/
ISR(ADC_vect) {
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	switch (inputChannel) {
  f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
  f6:	88 23       	and	r24, r24
  f8:	19 f0       	breq	.+6      	; 0x100 <__vector_21+0x20>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	69 f0       	breq	.+26     	; 0x118 <__vector_21+0x38>
  fe:	16 c0       	rjmp	.+44     	; 0x12c <__vector_21+0x4c>
		case 0:
			inputChannel = 1; // Change input channel to temperature sensor
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
			tempVal = ADC;
 106:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10e:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <tempVal+0x1>
 112:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <tempVal>
			break;
 116:	0a c0       	rjmp	.+20     	; 0x12c <__vector_21+0x4c>
		case 1:
			inputChannel = 0; // Change input channel to potentiometer
 118:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
			potVal = ADC;
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <potVal+0x1>
 128:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <potVal>
			break;
	}
	ADMUX = (ADMUX & 0b11110000) | inputChannel; // Changes input channel
 12c:	ec e7       	ldi	r30, 0x7C	; 124
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 136:	80 7f       	andi	r24, 0xF0	; 240
 138:	89 2b       	or	r24, r25
 13a:	80 83       	st	Z, r24
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <main>:

/************************************************************************/
/* Main loop. Does something... Â´\(o.o)/`                               */
/************************************************************************/
int main(void) {
	initADC();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
	initTimer();
 152:	0e 94 68 00 	call	0xd0	; 0xd0 <initTimer>
	initSerial();
 156:	0e 94 db 00 	call	0x1b6	; 0x1b6 <initSerial>
	sei();
 15a:	78 94       	sei

	while (1) {
		if (!(ADCSRA & (1<<ADSC))) { 	// If conversion is done
 15c:	ca e7       	ldi	r28, 0x7A	; 122
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	88 81       	ld	r24, Y
 162:	86 fd       	sbrc	r24, 6
 164:	03 c0       	rjmp	.+6      	; 0x16c <main+0x1e>
 			ADCSRA |= (1<<ADSC); 		// Start new conversion
 166:	88 81       	ld	r24, Y
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	88 83       	st	Y, r24
    	}
		if (potVal > 500) {
 16c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <potVal>
 170:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <potVal+0x1>
 174:	85 3f       	cpi	r24, 0xF5	; 245
 176:	91 40       	sbci	r25, 0x01	; 1
 178:	e0 f0       	brcs	.+56     	; 0x1b2 <main+0x64>
			OCR0A = tempVal/4;
 17a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <tempVal>
 17e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <tempVal+0x1>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	87 bd       	out	0x27, r24	; 39
			writeString("Temperature: ");
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 41 01 	call	0x282	; 0x282 <writeString>
			writeNumber(tempVal/4);
 194:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <tempVal>
 198:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <tempVal+0x1>
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <writeNumber>
			writeString("\n");
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 41 01 	call	0x282	; 0x282 <writeString>
 1b0:	d7 cf       	rjmp	.-82     	; 0x160 <main+0x12>
		} else {
			OCR0A = 0;
 1b2:	17 bc       	out	0x27, r1	; 39
 1b4:	d5 cf       	rjmp	.-86     	; 0x160 <main+0x12>

000001b6 <initSerial>:
			sign = -1;
			digit = '0';
		}
	} while (digit != 0);                     /* until type return */ // NULL-termination
	return sign*(1000*(thousands - '0') + 100*(hundreds - '0') + 10*(tens - '0') + ones - '0');
}
 1b6:	87 e6       	ldi	r24, 0x67	; 103
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c2:	88 e1       	ldi	r24, 0x18	; 24
 1c4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1ce:	08 95       	ret

000001d0 <transmitByte>:
 1d0:	e0 ec       	ldi	r30, 0xC0	; 192
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	90 81       	ld	r25, Z
 1d6:	95 ff       	sbrs	r25, 5
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <transmitByte+0x4>
 1da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1de:	08 95       	ret

000001e0 <writeNumber>:
 1e0:	cf 92       	push	r12
 1e2:	df 92       	push	r13
 1e4:	ef 92       	push	r14
 1e6:	ff 92       	push	r15
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	8c 01       	movw	r16, r24
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	21 f4       	brne	.+8      	; 0x1fe <writeNumber+0x1e>
 1f6:	80 e3       	ldi	r24, 0x30	; 48
 1f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <transmitByte>
 1fc:	39 c0       	rjmp	.+114    	; 0x270 <writeNumber+0x90>
 1fe:	99 23       	and	r25, r25
 200:	54 f5       	brge	.+84     	; 0x256 <writeNumber+0x76>
 202:	8d e2       	ldi	r24, 0x2D	; 45
 204:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <transmitByte>
 208:	11 95       	neg	r17
 20a:	01 95       	neg	r16
 20c:	11 09       	sbc	r17, r1
 20e:	23 c0       	rjmp	.+70     	; 0x256 <writeNumber+0x76>
 210:	c8 01       	movw	r24, r16
 212:	be 01       	movw	r22, r28
 214:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 218:	61 15       	cp	r22, r1
 21a:	71 05       	cpc	r23, r1
 21c:	31 f4       	brne	.+12     	; 0x22a <writeNumber+0x4a>
 21e:	01 15       	cp	r16, r1
 220:	11 05       	cpc	r17, r1
 222:	19 f0       	breq	.+6      	; 0x22a <writeNumber+0x4a>
 224:	0c 17       	cp	r16, r28
 226:	1d 07       	cpc	r17, r29
 228:	24 f4       	brge	.+8      	; 0x232 <writeNumber+0x52>
 22a:	80 e3       	ldi	r24, 0x30	; 48
 22c:	86 0f       	add	r24, r22
 22e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <transmitByte>
 232:	c8 01       	movw	r24, r16
 234:	be 01       	movw	r22, r28
 236:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 23a:	8c 01       	movw	r16, r24
 23c:	ce 01       	movw	r24, r28
 23e:	b6 01       	movw	r22, r12
 240:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 244:	eb 01       	movw	r28, r22
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	e8 1a       	sub	r14, r24
 24a:	f1 08       	sbc	r15, r1
 24c:	09 f7       	brne	.-62     	; 0x210 <writeNumber+0x30>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <transmitByte>
 254:	0d c0       	rjmp	.+26     	; 0x270 <writeNumber+0x90>
 256:	0f 2e       	mov	r0, r31
 258:	f5 e0       	ldi	r31, 0x05	; 5
 25a:	ef 2e       	mov	r14, r31
 25c:	f1 2c       	mov	r15, r1
 25e:	f0 2d       	mov	r31, r0
 260:	c0 e1       	ldi	r28, 0x10	; 16
 262:	d7 e2       	ldi	r29, 0x27	; 39
 264:	0f 2e       	mov	r0, r31
 266:	fa e0       	ldi	r31, 0x0A	; 10
 268:	cf 2e       	mov	r12, r31
 26a:	d1 2c       	mov	r13, r1
 26c:	f0 2d       	mov	r31, r0
 26e:	d0 cf       	rjmp	.-96     	; 0x210 <writeNumber+0x30>
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <writeString>:

void writeString(char* string) {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	while (*string) {
 288:	88 81       	ld	r24, Y
 28a:	88 23       	and	r24, r24
 28c:	31 f0       	breq	.+12     	; 0x29a <writeString+0x18>
 28e:	21 96       	adiw	r28, 0x01	; 1
		transmitByte(*string);
 290:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <transmitByte>
	} while (digit != 0);                     /* until type return */ // NULL-termination
	return sign*(1000*(thousands - '0') + 100*(hundreds - '0') + 10*(tens - '0') + ones - '0');
}

void writeString(char* string) {
	while (*string) {
 294:	89 91       	ld	r24, Y+
 296:	81 11       	cpse	r24, r1
 298:	fb cf       	rjmp	.-10     	; 0x290 <writeString+0xe>
		transmitByte(*string);
		string++;
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	07 2e       	mov	r0, r23
 2a4:	16 f4       	brtc	.+4      	; 0x2aa <__divmodhi4+0xa>
 2a6:	00 94       	com	r0
 2a8:	07 d0       	rcall	.+14     	; 0x2b8 <__divmodhi4_neg1>
 2aa:	77 fd       	sbrc	r23, 7
 2ac:	09 d0       	rcall	.+18     	; 0x2c0 <__divmodhi4_neg2>
 2ae:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__udivmodhi4>
 2b2:	07 fc       	sbrc	r0, 7
 2b4:	05 d0       	rcall	.+10     	; 0x2c0 <__divmodhi4_neg2>
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__divmodhi4_exit>

000002b8 <__divmodhi4_neg1>:
 2b8:	90 95       	com	r25
 2ba:	81 95       	neg	r24
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	08 95       	ret

000002c0 <__divmodhi4_neg2>:
 2c0:	70 95       	com	r23
 2c2:	61 95       	neg	r22
 2c4:	7f 4f       	sbci	r23, 0xFF	; 255

000002c6 <__divmodhi4_exit>:
 2c6:	08 95       	ret

000002c8 <__udivmodhi4>:
 2c8:	aa 1b       	sub	r26, r26
 2ca:	bb 1b       	sub	r27, r27
 2cc:	51 e1       	ldi	r21, 0x11	; 17
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <__udivmodhi4_ep>

000002d0 <__udivmodhi4_loop>:
 2d0:	aa 1f       	adc	r26, r26
 2d2:	bb 1f       	adc	r27, r27
 2d4:	a6 17       	cp	r26, r22
 2d6:	b7 07       	cpc	r27, r23
 2d8:	10 f0       	brcs	.+4      	; 0x2de <__udivmodhi4_ep>
 2da:	a6 1b       	sub	r26, r22
 2dc:	b7 0b       	sbc	r27, r23

000002de <__udivmodhi4_ep>:
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	5a 95       	dec	r21
 2e4:	a9 f7       	brne	.-22     	; 0x2d0 <__udivmodhi4_loop>
 2e6:	80 95       	com	r24
 2e8:	90 95       	com	r25
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	08 95       	ret

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>

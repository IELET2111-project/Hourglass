
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000967  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b0  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b8  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  00001898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043b  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e3  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002206  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
/* Initialization of analog-to-digital converter. Prescaler is set to:. */
/* Interrupts is enabled. Reference voltage is set to AVCC. ADC0 is the */
/* initial input channel.                                               */
/************************************************************************/
void initADC() {
	ADCSRA |= (1<<ADEN);										// Enable ADC
  90:	ea e7       	ldi	r30, 0x7A	; 122
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS1);				// Configure prescaler
  9a:	80 81       	ld	r24, Z
  9c:	86 60       	ori	r24, 0x06	; 6
  9e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);										// Configure interrupt									
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
	ADMUX |= (0<<REFS1) | (1<<REFS0);							// Set reference to AVCC
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR);										// Configure left adjusted result
  b0:	80 81       	ld	r24, Z
  b2:	80 62       	ori	r24, 0x20	; 32
  b4:	80 83       	st	Z, r24
	ADMUX |= (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);		// Configure ADC0 as input channel
  b6:	80 81       	ld	r24, Z
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <__vector_21>:
/* Interrupt service routine for analog-to-digital converter. ISR is    */
/* triggered on finished conversion. Saves conversion and toggles input */
/* channel. Switch statement can be replaced by:						*/
/* inputChannel = !inputChannel; if only ADC0 and ADC1 is used.         */
/************************************************************************/
ISR(ADC_vect) {
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
  ca:	ef 93       	push	r30
  cc:	ff 93       	push	r31
	inputValue = ADC;	
  ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  d6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <inputValue+0x1>
  da:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <inputValue>
	inputChannel = ADMUX & 0b00001111;
  de:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	switch (inputChannel) {
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	88 23       	and	r24, r24
  ee:	19 f0       	breq	.+6      	; 0xf6 <__vector_21+0x3a>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	29 f0       	breq	.+10     	; 0xfe <__vector_21+0x42>
  f4:	06 c0       	rjmp	.+12     	; 0x102 <__vector_21+0x46>
		case 0:
			inputChannel = 1; // Change input channel to temperature sensor
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
  fc:	02 c0       	rjmp	.+4      	; 0x102 <__vector_21+0x46>
		case 1:
			inputChannel = 0; // Change input channel to potentiometer
  fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
	}
	ADMUX = (ADMUX & 0b11110000) | inputChannel; // Changes input channel
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	80 7f       	andi	r24, 0xF0	; 240
 10e:	89 2b       	or	r24, r25
 110:	80 83       	st	Z, r24
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <main>:

/************************************************************************/
/* Main loop. Does something... Â´\(^.^)/`                               */
/************************************************************************/
int main(void) {
	initADC();
 124:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	initSerial();
 128:	0e 94 a2 00 	call	0x144	; 0x144 <initSerial>
	sei();
 12c:	78 94       	sei

	while (1) {	
		if (!(ADCSRA & (1<<ADSC))) { 	// If conversion is done
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	86 fd       	sbrc	r24, 6
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0x1a>
 			ADCSRA |= (1<<ADSC); 		// Start new conversion
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
    	}
		switch (inputChannel) {
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 142:	f7 cf       	rjmp	.-18     	; 0x132 <main+0xe>

00000144 <initSerial>:
#include <avr/io.h>
#include "serial.h"
#include <util/setbaud.h>

void initSerial() {
	UBRR0 = UBRR_VALUE;
 144:	87 e6       	ldi	r24, 0x67	; 103
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 14c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 150:	88 e1       	ldi	r24, 0x18	; 24
 152:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 15c:	08 95       	ret

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>


project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000296  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d4  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007db  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b9  00000000  00000000  0000157b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045a  00000000  00000000  00001b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000398  00000000  00000000  00001f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002336  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 49 01 	jmp	0x292	; 0x292 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define serialEmpty (UCSR0A & (1<<UDRE0))
#define serialAvailable (UCSR0A & (1<<RXC0))

int main(void) {
    initSerial();
  80:	0e 94 52 00 	call	0xa4	; 0xa4 <initSerial>
	DDRB |= (1<<DDB1);
  84:	21 9a       	sbi	0x04, 1	; 4

    while (1) {
		int16_t number = readNumber();
  86:	0e 94 bd 00 	call	0x17a	; 0x17a <readNumber>
		PINB |= (1<<PINB1);
  8a:	19 9a       	sbi	0x03, 1	; 3
		writeNumber(number);
  8c:	0e 94 6f 00 	call	0xde	; 0xde <writeNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	85 ea       	ldi	r24, 0xA5	; 165
  94:	9e e0       	ldi	r25, 0x0E	; 14
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <main+0x16>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x20>
  a0:	00 00       	nop
  a2:	f1 cf       	rjmp	.-30     	; 0x86 <main+0x6>

000000a4 <initSerial>:
			*string = response;                       /* add in a letter */
			string++;
		}
	}
	*string = 0;                          /* terminal NULL character */
}
  a4:	87 e6       	ldi	r24, 0x67	; 103
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  bc:	08 95       	ret

000000be <transmitByte>:
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	95 ff       	sbrs	r25, 5
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <transmitByte+0x4>
  c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  cc:	08 95       	ret

000000ce <receiveByte>:
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <receiveByte+0x4>
  d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <writeNumber>:
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	8c 01       	movw	r16, r24
  f0:	00 97       	sbiw	r24, 0x00	; 0
  f2:	21 f4       	brne	.+8      	; 0xfc <writeNumber+0x1e>
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
  fa:	36 c0       	rjmp	.+108    	; 0x168 <writeNumber+0x8a>
  fc:	99 23       	and	r25, r25
  fe:	3c f5       	brge	.+78     	; 0x14e <writeNumber+0x70>
 100:	8d e2       	ldi	r24, 0x2D	; 45
 102:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
 106:	11 95       	neg	r17
 108:	01 95       	neg	r16
 10a:	11 09       	sbc	r17, r1
 10c:	20 c0       	rjmp	.+64     	; 0x14e <writeNumber+0x70>
 10e:	c8 01       	movw	r24, r16
 110:	be 01       	movw	r22, r28
 112:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 116:	61 15       	cp	r22, r1
 118:	71 05       	cpc	r23, r1
 11a:	19 f4       	brne	.+6      	; 0x122 <writeNumber+0x44>
 11c:	01 15       	cp	r16, r1
 11e:	11 05       	cpc	r17, r1
 120:	21 f4       	brne	.+8      	; 0x12a <writeNumber+0x4c>
 122:	80 e3       	ldi	r24, 0x30	; 48
 124:	86 0f       	add	r24, r22
 126:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
 12a:	c8 01       	movw	r24, r16
 12c:	be 01       	movw	r22, r28
 12e:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 132:	8c 01       	movw	r16, r24
 134:	ce 01       	movw	r24, r28
 136:	b6 01       	movw	r22, r12
 138:	0e 94 21 01 	call	0x242	; 0x242 <__divmodhi4>
 13c:	eb 01       	movw	r28, r22
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	e8 1a       	sub	r14, r24
 142:	f1 08       	sbc	r15, r1
 144:	21 f7       	brne	.-56     	; 0x10e <writeNumber+0x30>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 5f 00 	call	0xbe	; 0xbe <transmitByte>
 14c:	0d c0       	rjmp	.+26     	; 0x168 <writeNumber+0x8a>
 14e:	0f 2e       	mov	r0, r31
 150:	f5 e0       	ldi	r31, 0x05	; 5
 152:	ef 2e       	mov	r14, r31
 154:	f1 2c       	mov	r15, r1
 156:	f0 2d       	mov	r31, r0
 158:	c0 e1       	ldi	r28, 0x10	; 16
 15a:	d7 e2       	ldi	r29, 0x27	; 39
 15c:	0f 2e       	mov	r0, r31
 15e:	fa e0       	ldi	r31, 0x0A	; 10
 160:	cf 2e       	mov	r12, r31
 162:	d1 2c       	mov	r13, r1
 164:	f0 2d       	mov	r31, r0
 166:	d3 cf       	rjmp	.-90     	; 0x10e <writeNumber+0x30>
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	08 95       	ret

0000017a <readNumber>:

int16_t readNumber() {
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
	char digit = '0';
	int16_t sign = 1;
 18a:	c1 e0       	ldi	r28, 0x01	; 1
 18c:	d0 e0       	ldi	r29, 0x00	; 0
	// Converts from string to number.
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
	char digit = '0';
 18e:	00 e3       	ldi	r16, 0x30	; 48
	// Gets a numerical 0-255 from the serial port.
	// Converts from string to number.
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
	char ones = '0';
 190:	10 e3       	ldi	r17, 0x30	; 48
int16_t readNumber() {
	// Gets a numerical 0-255 from the serial port.
	// Converts from string to number.
	char thousands = '0';
	char hundreds = '0';
	char tens = '0';
 192:	0f 2e       	mov	r0, r31
 194:	f0 e3       	ldi	r31, 0x30	; 48
 196:	ff 2e       	mov	r15, r31
 198:	f0 2d       	mov	r31, r0

int16_t readNumber() {
	// Gets a numerical 0-255 from the serial port.
	// Converts from string to number.
	char thousands = '0';
	char hundreds = '0';
 19a:	0f 2e       	mov	r0, r31
 19c:	f0 e3       	ldi	r31, 0x30	; 48
 19e:	ef 2e       	mov	r14, r31
 1a0:	f0 2d       	mov	r31, r0
		hundreds = tens;
		tens = ones;
		ones = digit;
		digit = receiveByte();                   /* get a new character */
		if (digit == '-') {
			sign = -1;
 1a2:	cc 24       	eor	r12, r12
 1a4:	ca 94       	dec	r12
 1a6:	dd 24       	eor	r13, r13
 1a8:	da 94       	dec	r13
 1aa:	07 c0       	rjmp	.+14     	; 0x1ba <readNumber+0x40>
 1ac:	cc 2d       	mov	r28, r12
 1ae:	dd 2d       	mov	r29, r13
			digit = '0';
 1b0:	80 e3       	ldi	r24, 0x30	; 48
 1b2:	ef 2c       	mov	r14, r15
 1b4:	f1 2e       	mov	r15, r17
 1b6:	10 2f       	mov	r17, r16
 1b8:	08 2f       	mov	r16, r24
	do {                                                   /* shift over */
		thousands = hundreds;
		hundreds = tens;
		tens = ones;
		ones = digit;
		digit = receiveByte();                   /* get a new character */
 1ba:	0e 94 67 00 	call	0xce	; 0xce <receiveByte>
		if (digit == '-') {
 1be:	8d 32       	cpi	r24, 0x2D	; 45
 1c0:	a9 f3       	breq	.-22     	; 0x1ac <readNumber+0x32>
			sign = -1;
			digit = '0';
		}
	} while (digit != 0);                     /* until type return */ // NULL-termination
 1c2:	81 11       	cpse	r24, r1
 1c4:	f6 cf       	rjmp	.-20     	; 0x1b2 <readNumber+0x38>
	return sign*(1000*(thousands - '0') + 100*(hundreds - '0') + 10*(tens - '0') + ones - '0');
 1c6:	4e 2d       	mov	r20, r14
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	40 53       	subi	r20, 0x30	; 48
 1cc:	51 09       	sbc	r21, r1
 1ce:	88 ee       	ldi	r24, 0xE8	; 232
 1d0:	93 e0       	ldi	r25, 0x03	; 3
 1d2:	48 9f       	mul	r20, r24
 1d4:	90 01       	movw	r18, r0
 1d6:	49 9f       	mul	r20, r25
 1d8:	30 0d       	add	r19, r0
 1da:	58 9f       	mul	r21, r24
 1dc:	30 0d       	add	r19, r0
 1de:	11 24       	eor	r1, r1
 1e0:	4f 2d       	mov	r20, r15
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	40 53       	subi	r20, 0x30	; 48
 1e6:	51 09       	sbc	r21, r1
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	64 9f       	mul	r22, r20
 1ec:	c0 01       	movw	r24, r0
 1ee:	65 9f       	mul	r22, r21
 1f0:	90 0d       	add	r25, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	21 2f       	mov	r18, r17
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	20 53       	subi	r18, 0x30	; 48
 1fe:	31 09       	sbc	r19, r1
 200:	a9 01       	movw	r20, r18
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	24 0f       	add	r18, r20
 214:	35 1f       	adc	r19, r21
 216:	82 0f       	add	r24, r18
 218:	93 1f       	adc	r25, r19
 21a:	80 0f       	add	r24, r16
 21c:	91 1d       	adc	r25, r1
 21e:	c0 97       	sbiw	r24, 0x30	; 48
}
 220:	9c 01       	movw	r18, r24
 222:	2c 9f       	mul	r18, r28
 224:	c0 01       	movw	r24, r0
 226:	2d 9f       	mul	r18, r29
 228:	90 0d       	add	r25, r0
 22a:	3c 9f       	mul	r19, r28
 22c:	90 0d       	add	r25, r0
 22e:	11 24       	eor	r1, r1
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	08 95       	ret

00000242 <__divmodhi4>:
 242:	97 fb       	bst	r25, 7
 244:	07 2e       	mov	r0, r23
 246:	16 f4       	brtc	.+4      	; 0x24c <__divmodhi4+0xa>
 248:	00 94       	com	r0
 24a:	07 d0       	rcall	.+14     	; 0x25a <__divmodhi4_neg1>
 24c:	77 fd       	sbrc	r23, 7
 24e:	09 d0       	rcall	.+18     	; 0x262 <__divmodhi4_neg2>
 250:	0e 94 35 01 	call	0x26a	; 0x26a <__udivmodhi4>
 254:	07 fc       	sbrc	r0, 7
 256:	05 d0       	rcall	.+10     	; 0x262 <__divmodhi4_neg2>
 258:	3e f4       	brtc	.+14     	; 0x268 <__divmodhi4_exit>

0000025a <__divmodhi4_neg1>:
 25a:	90 95       	com	r25
 25c:	81 95       	neg	r24
 25e:	9f 4f       	sbci	r25, 0xFF	; 255
 260:	08 95       	ret

00000262 <__divmodhi4_neg2>:
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255

00000268 <__divmodhi4_exit>:
 268:	08 95       	ret

0000026a <__udivmodhi4>:
 26a:	aa 1b       	sub	r26, r26
 26c:	bb 1b       	sub	r27, r27
 26e:	51 e1       	ldi	r21, 0x11	; 17
 270:	07 c0       	rjmp	.+14     	; 0x280 <__udivmodhi4_ep>

00000272 <__udivmodhi4_loop>:
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	a6 17       	cp	r26, r22
 278:	b7 07       	cpc	r27, r23
 27a:	10 f0       	brcs	.+4      	; 0x280 <__udivmodhi4_ep>
 27c:	a6 1b       	sub	r26, r22
 27e:	b7 0b       	sbc	r27, r23

00000280 <__udivmodhi4_ep>:
 280:	88 1f       	adc	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	5a 95       	dec	r21
 286:	a9 f7       	brne	.-22     	; 0x272 <__udivmodhi4_loop>
 288:	80 95       	com	r24
 28a:	90 95       	com	r25
 28c:	bc 01       	movw	r22, r24
 28e:	cd 01       	movw	r24, r26
 290:	08 95       	ret

00000292 <_exit>:
 292:	f8 94       	cli

00000294 <__stop_program>:
 294:	ff cf       	rjmp	.-2      	; 0x294 <__stop_program>
